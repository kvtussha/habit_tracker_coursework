import tracemalloc

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
import bot.keyboards as kb
from aiogram.fsm.context import FSMContext

from bot.utils import auth_user, create_user, user_info
from bot.states import Register, UserState

user_router = Router()
tracemalloc.start()


@user_router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(UserState.start)
    text = ('–ü—Ä–∏–≤–µ—Ç üåø –ú–µ–Ω—è –∑–æ–≤—É—Ç HabitTrackerBot\n\n'
            '–Ø - —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è üòâ\n\n'
            '–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π, '
            '—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö üçé')
    await message.answer(text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üí´:\n', reply_markup=kb.authorisation)


@user_router.callback_query(F.data == 'authorisation')
async def auth_user_id(message: Message, state: FSMContext) -> None:
    await state.set_state(UserState.auth)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n',
                         reply_markup=kb.get_number)


# @user_router.message(UserState.auth, F.contact)
# async def auth(message: Message, state: FSMContext) -> None:
#     await state.update_data(bot_id=message.contact.user_id)
#     await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üçä')
#     data = await state.get_data()
#     user_id = data["bot_id"]
#     ids = await auth_user()
#     if user_id in ids:
#         await message.answer('–°–ø–∞—Å–∏–±–æ, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üí•!')
#         await message.answer('–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üî• '
#                              '–£ –í–∞—Å –ø–æ—è–≤–∏–ª–æ—Å—å –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫',
#                              reply_markup=kb.main)
#     else:
#         await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. '
#                              '–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ ü•ë')
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É üí´:\n', reply_markup=kb.authorisation)


@user_router.callback_query(F.data == 'register')
async def register(message: Message, state: FSMContext) -> None:
    await state.set_state(Register.username)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è')


@user_router.message(Register.username)
async def register_name(message: Message, state: FSMContext) -> None:
    await state.update_data(username=message.text)
    await state.set_state(Register.number)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=kb.get_number)


@user_router.message(Register.number, F.contact)
async def register_bot_id(message: Message, state: FSMContext) -> None:
    await state.update_data(number=message.contact.phone_number)
    await state.update_data(bot_id=message.contact.user_id)
    data = await state.get_data()
    ids = await auth_user()
    if data["bot_id"] not in ids:
        username = data["username"]
        number = data["number"]
        user_id = data["bot_id"]
        await create_user(username, number, user_id)
        await message.answer(
            f'–í–∞—à–µ –∏–º—è: {username}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}\n–í–∞—à id: {user_id}\n'
            f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üî• '
                             '–£ –í–∞—Å –µ—Å—Ç—å –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫',
                             reply_markup=kb.main)
        await state.clear()
    else:
        await message.answer('–í–∞–º –Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üî• '
                             '–£ –í–∞—Å –µ—Å—Ç—å –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫',
                             reply_markup=kb.main)
